4.1
import sys

s=sys.argv[1]; s=s.lower().replace(' ','')
s2=''; z=0

while z < len(s):
	s2+=s[-z-1]
	z+=1
if s2 == s:
	print "YES"
else:
	print "NO"

4.2
import sys
s=list(sys.argv[1:])
s2=''
z=0

while z < len(s):
	s2=s2+' '+s[-1-z]
	z+=1 
s2=s2.strip(); print s2

4.3
import sys
string = sys.argv[1]
count = 0
flag = True

for char in string:
    if char == '(':
        count = count + 1
    elif char == ')':
        count = count - 1
    if count < 0:
        flag = False

if flag and count == 0:
    print 'YES'
else:
    print 'NO'

4.4
import sys, math
s1=sys.argv[1]; s1=int(s1); s2=sys.argv[2]; s2=int(s2); 
l=[]; ll=[]

while s1 < s2+1:
	l.insert(-1,str(s1))
	s1+=1

for i in l:
	if len(i) < 6:
		while len(i) < 6:
			i='0'+i; 
	ll.insert(-1, i); 
del l[0:]

for i in ll:
	if (int(i[0])+int(i[1])+int(i[2])) == (int(i[3])+int(i[4])+int(i[5])):
		l.append(i)

print len(l)

бекон
import sys
key = 'aaaaabbbbbabbbaabbababbaaababaab'
alphabet = 'abcdefghijklmnopqrstuvwxyz'
input_str = str(sys.argv[1])
s = input_str.replace(' ', '')
new_str=''
i =0
n = len(s) - len(s)%5

while i < n:
	new_str = new_str + ' ' + s[i: (i+5)]
	i=i+5
new_str = new_str.strip()
arr =[]
arr=new_str.split(' ')
new_arr = []
i = 0
j = 0
while i < (len(arr)):
	s1=''
	while j < (len(arr[i])):
		if arr[i][j].isupper():
			s1=s1+'b'
		elif arr[i][j].islower():
			s1=s1+'a'
		j = j+1
	new_arr.insert(i, s1)
	i = i+1
	j = 0
res =[]
k =0
while  k< len(new_arr):
	num = key.find(new_arr[k], 0, len(key))
	s2 = alphabet[num]
	res.insert(k, s2)
	k = k+1
k =0
s3=''
while  k< len(res):
	s3 = s3 + res[k]
	k = k+1
print s3


5.1
def clean_list(l):
    a = []
    for i in l:
        for j in a:
            if j == i and type(j) == type(i):
                break
        else:
            a.append(i)
    return a

5.2
def counter(a, b):
    num = 0
    a_str = str(a)
    b_str = str(b)
    found = ''
    for char_b in b_str:
        if a_str.find(char_b) != -1 and found.find(char_b) == -1:
            num = num + 1
            found = found + char_b
    return num

5.3
def super_fibonacci(n, m):
    # за умовою перші m елементів - одиниці
    if n<=m:
        return 1
    # інакше доведеться рахувати
    else:
        # ініціалізуємо змінну для суми
        sum = 0
        # і додаємо m попередніх членів послідовності, для розрахунку кожного з них рекурсивно викликаємо нашу функцію
        for i in range(1, m+1):
            previous = super_fibonacci(n-i, m)
            sum = sum + previous
        # повертаємо суму, яка є значенням n-го елементу
        return sum

5.4
def file_search(folder, filename):
	try:
		s=folder[0]+"/"
		if filename in folder:
			return(s+filename)
		for i in folder:
			if isinstance(i, list)== True:
				if len(i) > 1:
					recursion=file_search(i, filename)
					if s != None:
						s = s + recursion
					return(s)
		return False
	except TypeError:
		return False


print file_search(['C:', 'backup.log', 'ideas.txt'], 'ideas.txt'), '-->C:/ideas.txt'
print file_search([ 'D:', ['recycle bin'], ['tmp', ['old'], ['new folder1', 'asd.txt', 'asd.bak', 'find.me.bak' ] ], 'hey.py'], '-->find.me'), "-->False"
print file_search([ '/home', ['user1'], ['user2', ['my pictures'], ['desktop', 'not this', 'and not this', ['new folder', 'hereiam.py' ] ] ], 'work.ovpn', 'prometheus.7z', ['user3', ['temp'], ], 'hey.py'], 'hereiam.py'), '-->/home/user2/desktop/new folder/hereiam.py'
print file_search(['C:'], 'crack.exe'), "-->False"
print file_search(['C:', '1.txt', '2.txt', '3.txt', '4.txt'], '4.txt'),"-->C:/4.txt"
print file_search(['C:', '1.txt', '2.txt', '3.txt', '4.txt'], '1.txt') ,"-->C:/1.txt"
print file_search(['D:', ['recycle bin'], ['tmp', ['old'], ['new folder1', 'asd.txt', 'asd.bak', 'find.me']], 'hey.py'], 'find.me'), "-->D:/tmp/new folder1/find.me"
print file_search(['/tmp', ['1', ['2', ['3', ['4', ['5', 'key1', 'key2', 'key3']]]]]], 'key3'), "-->/tmp/1/2/3/4/5/key3"
